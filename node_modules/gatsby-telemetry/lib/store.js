"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

const _require = require(`os`),
      homedir = _require.homedir;

const path = require(`path`);

const _require2 = require(`fs`),
      appendFileSync = _require2.appendFileSync,
      readFileSync = _require2.readFileSync,
      renameSync = _require2.renameSync,
      existsSync = _require2.existsSync,
      unlinkSync = _require2.unlinkSync;

const _require3 = require(`fs-extra`),
      ensureDirSync = _require3.ensureDirSync;

const Configstore = require(`configstore`);

module.exports = class Store {
  constructor() {
    (0, _defineProperty2.default)(this, "config", new Configstore(`gatsby`, {}, {
      globalConfigPath: true
    }));
  }

  getConfig(key) {
    if (key) {
      return this.config.get(key);
    }

    return this.config.all;
  }

  updateConfig(...fields) {
    this.config.set(...fields);
  }

  appendToBuffer(event) {
    const bufferPath = this.getBufferFilePath();

    try {
      appendFileSync(bufferPath, event, `utf8`);
    } catch (e) {//ignore
    }
  }

  getConfigPath() {
    const configPath = path.join(homedir(), `.config/gatsby`);

    try {
      ensureDirSync(configPath);
    } catch (e) {//ignore
    }

    return configPath;
  }

  getBufferFilePath() {
    const configPath = this.getConfigPath();
    return path.join(configPath, `events.json`);
  }

  startFlushEvents(flushOperation) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const now = Date.now();

      const filePath = _this.getBufferFilePath();

      try {
        if (!existsSync(filePath)) {
          return;
        }
      } catch (e) {
        // ignore
        return;
      }

      const newPath = `${filePath}-${now}`;

      try {
        renameSync(filePath, newPath);
      } catch (e) {
        // ignore
        return;
      }

      let contents;

      try {
        contents = readFileSync(newPath, `utf8`);
        unlinkSync(newPath);
      } catch (e) {
        //ignore
        return;
      } // There is still a chance process dies while sending data and some events are lost
      // This will be ok for now, however


      let success = false;

      try {
        success = yield flushOperation(contents);
      } catch (e) {// ignore
      } finally {
        // if sending fails, we write the data back to the log
        if (!success) {
          _this.appendToBuffer(contents);
        }
      }
    })();
  }

};