"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

const Store = require(`./store`);

const fetch = require(`node-fetch`);

const isTruthy = require(`./is-truthy`);
/* The events data collection is a spooled process that
 * buffers events to a local fs based buffer
 * which then is asynchronously flushed to the server.
 * This both increases the fault tolerancy and allows collection
 * to continue even when working offline.
 */


module.exports = class EventStorage {
  constructor() {
    (0, _defineProperty2.default)(this, "store", new Store());
    (0, _defineProperty2.default)(this, "debugEvents", isTruthy(process.env.GATSBY_TELEMETRY_DEBUG));
    (0, _defineProperty2.default)(this, "disabled", isTruthy(process.env.GATSBY_TELEMETRY_DISABLED));
  }

  addEvent(event) {
    if (this.disabled) {
      return;
    }

    if (this.debugEvents) {
      console.error(`Captured event:`, JSON.stringify(event));
    } else {
      this.store.appendToBuffer(JSON.stringify(event) + `\n`);
    }
  }

  sendEvents() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return _this.store.startFlushEvents(
      /*#__PURE__*/
      function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (eventsData) {
          const events = eventsData.split(`\n`).filter(e => e && e.length > 2) // drop empty lines
          .map(e => JSON.parse(e));
          return _this.submitEvents(events);
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  }

  submitEvents(events) {
    return (0, _asyncToGenerator2.default)(function* () {
      try {
        const res = yield fetch(`https://analytics.gatsbyjs.com/events`, {
          method: `POST`,
          headers: {
            "content-type": `application/json`
          },
          body: JSON.stringify(events)
        });
        return res.ok;
      } catch (e) {
        return false;
      }
    })();
  }

  getConfig(key) {
    if (key) {
      return this.store.getConfig(key);
    }

    return this.store.getConfig();
  }

  updateConfig(...conf) {
    return this.store.updateConfig(...conf);
  }

};