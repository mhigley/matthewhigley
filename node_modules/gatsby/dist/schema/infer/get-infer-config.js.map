{"version":3,"sources":["../../../src/schema/infer/get-infer-config.js"],"names":["require","Kind","DEFAULT_INFER_CONFIG","infer","addDefaultResolvers","getInferConfig","typeComposer","type","getType","inferConfig","astNode","directives","forEach","directive","name","value","getNoDefaultResolvers","module","exports","noDefaultResolvers","arguments","find","kind","BOOLEAN"],"mappings":";;iBAEiBA,OAAO,CAAE,SAAF,C;MAAhBC,I,YAAAA,I;;AAOR,MAAMC,oBAAiC,GAAG;AACxCC,EAAAA,KAAK,EAAE,IADiC;AAExCC,EAAAA,mBAAmB,EAAE,IAFmB,CAK1C;;AAL0C,CAA1C;;AAMA,MAAMC,cAEU,GAAGC,YAAY,IAAI;AACjC,QAAMC,IAAI,GAAGD,YAAY,CAACE,OAAb,EAAb;AACA,QAAMC,WAAW,qBAAQP,oBAAR,CAAjB;;AACA,MAAIK,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACG,OAAL,CAAaC,UAAjC,EAA6C;AAC3CJ,IAAAA,IAAI,CAACG,OAAL,CAAaC,UAAb,CAAwBC,OAAxB,CAAgCC,SAAS,IAAI;AAC3C,UAAIA,SAAS,CAACC,IAAV,CAAeC,KAAf,KAA0B,OAA9B,EAAsC;AACpCN,QAAAA,WAAW,CAACN,KAAZ,GAAoB,IAApB;AACAM,QAAAA,WAAW,CAACL,mBAAZ,GAAkCY,qBAAqB,CAACH,SAAD,CAAvD;AACD,OAHD,MAGO,IAAIA,SAAS,CAACC,IAAV,CAAeC,KAAf,KAA0B,WAA9B,EAA0C;AAC/CN,QAAAA,WAAW,CAACN,KAAZ,GAAoB,KAApB;AACAM,QAAAA,WAAW,CAACL,mBAAZ,GAAkCY,qBAAqB,CAACH,SAAD,CAAvD;AACD;AACF,KARD;AASD;;AAED,SAAOJ,WAAP;AACD,CAlBD;;AAoBAQ,MAAM,CAACC,OAAP,GAAiBb,cAAjB;;AAEA,MAAMW,qBAAqB,GAAGH,SAAS,IAAI;AACzC,QAAMM,kBAAkB,GAAGN,SAAS,CAACO,SAAV,CAAoBC,IAApB,CACzB,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACC,KAAL,KAAgB,oBADL,CAA3B;;AAGA,MAAII,kBAAJ,EAAwB;AACtB,QAAIA,kBAAkB,CAACJ,KAAnB,CAAyBO,IAAzB,KAAkCrB,IAAI,CAACsB,OAA3C,EAAoD;AAClD,aAAO,CAACJ,kBAAkB,CAACJ,KAAnB,CAAyBA,KAAjC;AACD;AACF;;AAED,SAAOb,oBAAoB,CAACE,mBAA5B;AACD,CAXD","sourcesContent":["// @flow\n\nconst { Kind } = require(`graphql`)\n\nexport interface InferConfig {\n  infer: boolean;\n  addDefaultResolvers: boolean;\n}\n\nconst DEFAULT_INFER_CONFIG: InferConfig = {\n  infer: true,\n  addDefaultResolvers: true,\n}\n\n// Get inferance config from type directives\nconst getInferConfig: (\n  typeComposer: TypeComposer\n) => InferConfig = typeComposer => {\n  const type = typeComposer.getType()\n  const inferConfig = { ...DEFAULT_INFER_CONFIG }\n  if (type.astNode && type.astNode.directives) {\n    type.astNode.directives.forEach(directive => {\n      if (directive.name.value === `infer`) {\n        inferConfig.infer = true\n        inferConfig.addDefaultResolvers = getNoDefaultResolvers(directive)\n      } else if (directive.name.value === `dontInfer`) {\n        inferConfig.infer = false\n        inferConfig.addDefaultResolvers = getNoDefaultResolvers(directive)\n      }\n    })\n  }\n\n  return inferConfig\n}\n\nmodule.exports = getInferConfig\n\nconst getNoDefaultResolvers = directive => {\n  const noDefaultResolvers = directive.arguments.find(\n    ({ name }) => name.value === `noDefaultResolvers`\n  )\n  if (noDefaultResolvers) {\n    if (noDefaultResolvers.value.kind === Kind.BOOLEAN) {\n      return !noDefaultResolvers.value.value\n    }\n  }\n\n  return DEFAULT_INFER_CONFIG.addDefaultResolvers\n}\n"],"file":"get-infer-config.js"}