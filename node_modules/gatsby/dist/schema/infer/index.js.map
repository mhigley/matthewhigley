{"version":3,"sources":["../../../src/schema/infer/index.js"],"names":["report","require","getExampleValue","addNodeInterface","getNodeInterface","addInferredFields","getInferConfig","addInferredType","schemaComposer","typeComposer","nodeStore","typeConflictReporter","typeMapping","parentSpan","typeName","getTypeName","exampleValue","nodes","getNodesByType","ignoreFields","getFieldNames","inferConfig","addInferredTypes","typeNames","putFileFirst","getTypes","noNodeInterfaceTypes","forEach","has","getOTC","infer","hasInterface","push","getType","createObjectTC","typeComposers","map","length","type","warn","panic","index","indexOf","slice","module","exports"],"mappings":"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","sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst { getExampleValue } = require(`./example-value`)\nconst {\n  addNodeInterface,\n  getNodeInterface,\n} = require(`../types/node-interface`)\nconst { addInferredFields } = require(`./add-inferred-fields`)\nconst getInferConfig = require(`./get-infer-config`)\n\nconst addInferredType = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  parentSpan,\n}) => {\n  const typeName = typeComposer.getTypeName()\n  const exampleValue = getExampleValue({\n    nodes: nodeStore.getNodesByType(typeName),\n    typeName,\n    typeConflictReporter,\n    ignoreFields: [\n      ...getNodeInterface({ schemaComposer }).getFieldNames(),\n      `$loki`,\n    ],\n  })\n\n  addInferredFields({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    exampleValue,\n    inferConfig: getInferConfig(typeComposer),\n    typeMapping,\n    parentSpan,\n  })\n  return typeComposer\n}\n\nconst addInferredTypes = ({\n  schemaComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  parentSpan,\n}) => {\n  // XXX(freiksenet): Won't be needed after plugins set typedefs\n  // Infer File first so all the links to it would work\n  const typeNames = putFileFirst(nodeStore.getTypes())\n  const noNodeInterfaceTypes = []\n\n  typeNames.forEach(typeName => {\n    let typeComposer\n    let inferConfig\n    if (schemaComposer.has(typeName)) {\n      typeComposer = schemaComposer.getOTC(typeName)\n      inferConfig = getInferConfig(typeComposer)\n      if (inferConfig.infer) {\n        if (!typeComposer.hasInterface(`Node`)) {\n          noNodeInterfaceTypes.push(typeComposer.getType())\n        }\n      }\n    } else {\n      typeComposer = schemaComposer.createObjectTC(typeName)\n      addNodeInterface({ schemaComposer, typeComposer })\n    }\n  })\n\n  // XXX(freiksenet): We iterate twice to pre-create all types\n  const typeComposers = typeNames.map(typeName =>\n    addInferredType({\n      schemaComposer,\n      nodeStore,\n      typeConflictReporter,\n      typeComposer: schemaComposer.getOTC(typeName),\n      typeMapping,\n      parentSpan,\n    })\n  )\n\n  if (noNodeInterfaceTypes.length > 0) {\n    noNodeInterfaceTypes.forEach(type => {\n      report.warn(\n        `Type \\`${type}\\` declared in \\`createTypes\\` looks like a node, ` +\n          `but doesn't implement a \\`Node\\` interface. It's likely that you should ` +\n          `add the \\`Node\\` interface to your type def:\\n\\n` +\n          `\\`type ${type} implements Node { ... }\\`\\n\\n` +\n          `If you know that you don't want it to be a node (which would mean no ` +\n          `root queries to retrieve it), you can explicitly disable inference ` +\n          `for it:\\n\\n` +\n          `\\`type ${type} @dontInfer { ... }\\``\n      )\n    })\n    report.panic(`Building schema failed`)\n  }\n\n  return typeComposers\n}\n\nconst putFileFirst = typeNames => {\n  const index = typeNames.indexOf(`File`)\n  if (index !== -1) {\n    return [`File`, ...typeNames.slice(0, index), ...typeNames.slice(index + 1)]\n  } else {\n    return typeNames\n  }\n}\n\nmodule.exports = {\n  addInferredType,\n  addInferredTypes,\n}\n"],"file":"index.js"}