{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","getNamedType","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","thirdPartySchemas","typeMapping","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","values","map","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addResolvers","addConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","addedTypes","addTypeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","addAsComposer","checkIsAllowedTypeName","get","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","name","endsWith","includes","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","warn","JSON","stringify","tc","getTypeName","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","processThirdPartyType","getFields","Query","addFields","getTypeMap","Object","keys","getAnyTC","isThirdPartyType","getFieldNames","fieldName","fieldType","getFieldType","extendField","toString","replace","intermediateSchema","createResolvers","resolvers","has","fieldConfig","hasField","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","newConfig","args","source","context","info","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","addResolver","filter","sort","skip","limit","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","undefined","value","queryName","queryNamePlural","getResolver","message","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","panic"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n  getNamedType,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n} = require(`graphql-compose`)\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  thirdPartySchemas,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getOTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(schemaComposer.values()).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (\n    typeComposer instanceof ObjectTypeComposer &&\n    typeComposer.hasInterface(`Node`)\n  ) {\n    await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n    await addResolvers({ schemaComposer, typeComposer, parentSpan })\n    await addConvenienceChildrenFields({\n      schemaComposer,\n      typeComposer,\n      nodeStore,\n      parentSpan,\n    })\n    await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(typeOrTypeDef => {\n    if (typeof typeOrTypeDef === `string`) {\n      let addedTypes\n      try {\n        addedTypes = schemaComposer.addTypeDefs(typeOrTypeDef)\n      } catch (error) {\n        reportParsingError(error)\n      }\n      addedTypes.forEach(type =>\n        processAddedType({ schemaComposer, type, parentSpan })\n      )\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n      if (type) {\n        processAddedType({ schemaComposer, type, parentSpan })\n      }\n    } else {\n      processAddedType({ schemaComposer, type: typeOrTypeDef, parentSpan })\n    }\n  })\n}\n\nconst processAddedType = ({ schemaComposer, type, parentSpan }) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  checkIsAllowedTypeName(typeName)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan: parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = ObjectTypeComposer.createTemp(schemaQueryType)\n    processThirdPartyType({\n      schemaComposer,\n      typeComposer: queryTC,\n      schemaQueryType,\n    })\n    const fields = queryTC.getFields()\n    schemaComposer.Query.addFields(fields)\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type)\n      ) {\n        schemaComposer.addAsComposer(type)\n        const typeComposer = schemaComposer.getAnyTC(type.name)\n        processThirdPartyType({ schemaComposer, typeComposer, schemaQueryType })\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyType = ({\n  schemaComposer,\n  typeComposer,\n  schemaQueryType,\n}) => {\n  typeComposer.getType().isThirdPartyType = true\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      const fieldType = typeComposer.getFieldType(fieldName)\n      if (getNamedType(fieldType) === schemaQueryType) {\n        typeComposer.extendField(fieldName, {\n          type: fieldType.toString().replace(schemaQueryType.name, `Query`),\n        })\n      }\n    })\n  }\n  return typeComposer\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            const fieldTypeName =\n              fieldConfig.type && fieldConfig.type.toString()\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getType().isThirdPartyType\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan: parentSpan,\n  })\n}\n\nconst addResolvers = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n  typeComposer.addResolver({\n    name: `findOne`,\n    type: typeComposer,\n    args: {\n      ...filterInputTC.getFields(),\n    },\n    resolve: findOne(typeName),\n  })\n  typeComposer.addResolver({\n    name: `findManyPaginated`,\n    type: paginationTC,\n    args: {\n      filter: filterInputTC,\n      sort: sortInputTC,\n      skip: `Int`,\n      limit: `Int`,\n      // page: `Int`,\n      // perPage: { type: `Int`, defaultValue: 20 },\n    },\n    resolve: findManyPaginated(typeName),\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n  schemaComposer.Query.addFields({\n    [queryName]: typeComposer.getResolver(`findOne`),\n    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),\n  })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const report = require(`gatsby-cli/lib/reporter`)\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n"],"file":"schema.js"}